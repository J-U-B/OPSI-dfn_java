;==========================================================================
; helpers.opsifunc
; 
; Some general helper functions...
;
; J. Boettge <boettge@mpi-halle.mpg.de>		2018-04-03 16:20:23 +0200
;==========================================================================

;-------------------------------------------------------------------------
DefFunc identity(val $ident$:string) : string
;-------------------------------------------------------------------------
; dummy function
;-------------------------------------------------------------------------
	set $result$ = $ident$
EndFunc


;-------------------------------------------------------------------------
DefFunc getEnvVar(val $key$:string) : string
;-------------------------------------------------------------------------
; Returns requestet environment variable from registry.
; If the key doesn't exist, the result is an empty string.
; Unlike EnvVar, it doesn't dissolve variables.
;-------------------------------------------------------------------------
	DefVar $logLvl$
	set $logLvl$=getLoglevel
	setLogLevel=0
	Set $result$ = GetRegistryStringValueSysNative("[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\control\Session Manager\Environment] " + $key$)
	setLogLevel=$logLvl$
EndFunc


;-------------------------------------------------------------------------
DefFunc setEnvVar(val $key$:string, val $value$:string, val $type$:string) : string
;-------------------------------------------------------------------------
; Set environment variables directly in the registry and verify written value.
; Valid types are: REG_SZ and REG_EXPAND_SZ
; Return values:
;	"0"		success
;	"1"		verify failed
;	"2"		invalid type
;-------------------------------------------------------------------------
	DefVar $logLvl$
	set $logLvl$=getLoglevel
	setLogLevel=0
	if ($type$ = "REG_SZ") or ($type$ = "REG_EXPAND_SZ")
		;set $value$ = RegString($value$)
		Registry_setEnvVar /SysNative
		if (GetRegistryStringValueSysNative("[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\control\Session Manager\Environment] " + $key$) = $value$)
			set $result$="0"
		else
			set $result$="1"
		endif
	else
		set $result$="2"
	endif
	setLogLevel=$logLvl$
	
	[Registry_setEnvVar]
	Openkey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\control\Session Manager\Environment]
	Set "$key$" = $type$:"$value$"
	FlushKey
	;end Registry_setEnvVar
		
EndFunc


;-------------------------------------------------------------------------
DefFunc delEnvVar(val $key$:string) : string
;-------------------------------------------------------------------------
; Delete the given environment variable for registry

; Return values:
;	"0"		variable does not exist or is empty
;	"1"		variable still exists and is NOT empty
;-------------------------------------------------------------------------
	DefVar $logLvl$
	DefVar $value$
	set $logLvl$=getLoglevel
	setLogLevel=0
	Registry_delEnvVar /SysNative
	set $value$ = GetRegistryStringValueSysNative("[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\control\Session Manager\Environment] " + $key$)
	if ($value$ = "")
		set $result$="0"
	else
		set $result$="1"
	endif
	setLogLevel=$logLvl$
	
	[Registry_delEnvVar]
	Openkey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\control\Session Manager\Environment]
	DeleteVar "$key$"
	FlushKey
	;end Registry_delEnvVar
		
EndFunc


;-------------------------------------------------------------------------
DefFunc removePath(val $fullPaths$:string, val $pathToRemove$:string) : string
;-------------------------------------------------------------------------
; Removes the $pathToRemove$ from $fullPaths$
;-------------------------------------------------------------------------
	DefVar $logLvl$
	DefStringList $pathList$
	set $logLvl$=getLoglevel
	setLogLevel=0
	Set $pathList$ = splitString($fullPaths$, ";")
	Set $pathList$ = removeFromListByMatch($pathToRemove$,$pathList$)
	Set $pathList$ = removeFromListByMatch("", $pathList$)
	Set $result$ = composeString($pathList$, ";")
	setLogLevel=$logLvl$
EndFunc


;-------------------------------------------------------------------------
DefFunc addPath(val $fullPaths$:string, val $pathToAdd$:string) : string
;-------------------------------------------------------------------------
; Append $pathToAdd$ to $fullPaths$.
; If $fullPaths$ already contains $pathToAdd$ it remains unchanged
;-------------------------------------------------------------------------
	DefVar $logLvl$
	DefStringList $pathList$
	set $logLvl$=getLoglevel
	setLogLevel=0
	DefVar $found$
	Set $pathList$ = splitString($fullPaths$, ";")
	Set $pathList$ = removeFromListByMatch("", $pathList$)
	set $found$="false"
	for %p% in $pathList$ do sub_compare_path
	if ($found$ = "true")
		comment "Path already contains [" + $pathToAdd$ + "]"
		set $result$ = $path$
	else
		comment "Appending to path: [" + $pathToAdd$ + "]"
		Set $pathList$ = addToList($pathList$, $pathToAdd$)
		Set $result$ = composeString($pathList$, ";")
	endif
	setLogLevel=$logLvl$
	
	[sub_compare_path]
	if ("%p%" = $pathToAdd$)
		set $found$ = "true"
	endif
EndFunc


;-------------------------------------------------------------------------
DefFunc powershellGetExecPolicy(ref $policy$:string) : string
;-------------------------------------------------------------------------
; get the current execution policy for PowerShell
; Return value:
;		* string representation of execution policy
;		* -1 if an error occured
;-------------------------------------------------------------------------
	DefStringList $outStream$
	set $outStream$ = shellCall('powershell.exe get-executionpolicy')
	if (GetLastExitCode = "0")
		set $result$ = takeString(0, $outStream$)
		set $policy$ = $result$
	else
		set $result$ = "-1"
	endif
EndFunc


;-------------------------------------------------------------------------
DefFunc powershellSetExecPolicy(val $policy$:string) : string
;-------------------------------------------------------------------------
; set the execution policy for PowerShell
; valid values for policy: 
;		Unrestricted | RemoteSigned | AllSigned | Restricted 
;		| Default | Bypass | Undefined
; Return value:
;		* result of powershell call
;		* -1 if invalid policy was given
;-------------------------------------------------------------------------
	DefStringList $outStream$
	DefVar $ValidPolicies$
	Set $ValidPolicies$ = "|unrestricted|remotesigned|allsigned|restricted|default|bypass|undefined|"
	if contains($ValidPolicies$, "|"+lower($policy$)+"|")
		set $outStream$ = shellCall('powershell.exe set-executionpolicy ' + $policy$)
		set $result$ = getLastExitCode
	else
		set $result$ = "-1"
	endif
EndFunc




;-------------------------------------------------------------------------
DefFunc setShellfolderEnv(val $logLvl:string) : string
;-------------------------------------------------------------------------
; Set ShellFolders for user pcpatch to avoid errors during installation
;-------------------------------------------------------------------------
	DefVar $curLogLvl$
	set $curLogLvl$=getLoglevel
	setLogLevel=$logLvl$
	if ($SystemType$ = "x86 System") 
		comment "Create local user folders for 32 bit environment"
		Registry_shellfolders /32Bit	
	endif
	 
	if ($SystemType$ = "64 Bit System") 
		comment "Create local user folders for 64 bit environment"
		Registry_shellfolders /64Bit	
	endif
	setLogLevel=$curLogLvl$
	
	;----------------------
	[Registry_shellfolders]
	;----------------------
	openkey [HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders]
	set "AppData" = REG_EXPAND_SZ:"$LogDir$\pcpatch\ApplicationData"
	set "Desktop" = REG_EXPAND_SZ:"$LogDir$\pcpatch\Desktop"
	set "Favorites" = REG_EXPAND_SZ:"$LogDir$\pcpatch\Favorites"
	set "NetHood" = REG_EXPAND_SZ:"$LogDir$\pcpatch\NetHood"
	set "Personal" = REG_EXPAND_SZ:"$LogDir$\pcpatch\MyDocuments"
	set "PrintHood" = REG_EXPAND_SZ:"$LogDir$\pcpatch\PrintHood"
	set "Programs" = REG_EXPAND_SZ:"$LogDir$\pcpatch\StartMenu\Programs"
	set "Recent" = REG_EXPAND_SZ:"$LogDir$\pcpatch\Recent"
	set "SendTo" = REG_EXPAND_SZ:"$LogDir$\pcpatch\SendTo"
	set "Start Menu" = REG_EXPAND_SZ:"$LogDir$\pcpatch\StartMenu"
	set "Startup" = REG_EXPAND_SZ:"$LogDir$\pcpatch\StartMenu\Programs\Startup"
	set "Templates" = REG_EXPAND_SZ:"$LogDir$\pcpatch\Templates"
	set "Cookies" = REG_EXPAND_SZ:"$LogDir$\pcpatch\Cookies"
	set "My Pictures" = REG_EXPAND_SZ:"$LogDir$\pcpatch\MyDocuments\MyPictures"
	set "Local Settings" = REG_EXPAND_SZ:"$LogDir$\pcpatch\LocalSettings"
	set "Local AppData" = REG_EXPAND_SZ:"$LogDir$\pcpatch\LocalSettings\ApplicationData"
	set "Cache" = REG_EXPAND_SZ:"$LogDir$\pcpatch\LocalSettings\TemporaryInternetFiles"
	set "History" = REG_EXPAND_SZ:"$LogDir$\pcpatch\LocalSettings\History"
	;end Registry_shellfolders
	
EndFunc 





