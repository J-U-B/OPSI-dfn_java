;======================================================================
; setup.ins JAVA
; Installer-Typ: Oracle/MSI
; 
; J. Boettge <boettge@mpi-halle.mpg.de>		2018-04-04 14:29:29 +0200
;======================================================================

;======================================================================
[Initial]
;======================================================================
setLogLevel=5
; Log Errors in Logfile but don't abort:
ExitOnError=true
; Show syntax errors in the script:
ScriptErrorMessages=off
; Dont trace step by step through the script: 
TraceMode=off 
; Let started programs run in front of the winst window
StayOnTop=false 

;======================================================================
[Actions]
;======================================================================
include_insert "%ScriptPath%\product_variables.opsiinc"


;=== Check free space
if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
	LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
	isFatalError
else
	;=== remove previous installation
	if FileExists("%ScriptPath%\delsub.opsiinc")
		comment  "Starting uninstall sub section"
		include_append "%ScriptPath%\delsub.opsiinc"
		sub_delsub_main
	else
		logError "Can't find uninstaller script"
		isFatalError "delsub.opsiinc not found"
	endif	
	
	if FileExists($InstallLog$)
		Files_delInstallLog
	endif
	
	if not(FileExists($JAVASETTINGSCFG$))
		PatchTextFile_javasettingscfg  "$JAVASETTINGSCFG$"
	endif
	
	;=== Start the installation
	ShowBitmap $Img_Install$ $ProductName$
	Message "Installing " + $ProductName$ + " " + $Version$
	marktime
	
	;Comment "Preparing ShellFolder workaround for JRE>=9"
	;...is not sufficient
	;set $res$ = setShellfolderEnv(0)
		
	if contains($sw_arch$,"32")
		;set $InstallDir$ 	= $InstallBase32$ + "\" + $PathPrefix$
	
		{{#ifdef_property_jre}}
		if ($bInstallJRE$ = "true")
			if (CompareDotSeparatedNumbers($Version$, "<", "9.0"))
				message "Installing JRE " + $Version$ + " (32 bit)"
				set $INSTALLER$ 		= $SrcDir$ + $JRE_INSTALLER_32$
				set $INSTALL_OPTIONS$	= $Inst_Opts_JRE$
				set $InstallDir$ 		= $InstallBase32$ + "\" + $PathPrefix$ + "JRE_" + $JAVA_VER$ 
				
				Sub_Install
			else
				logWarning "JRE " + $Version$ + " is only available in 64 bit."
			endif
		endif
		{{/ifdef_property_jre}}
		
		{{#ifdef_property_jdk}}
		if ($bInstallJDK$ = "true")
			if (CompareDotSeparatedNumbers($Version$, "<", "9.0"))
				message "Installing JDK " + $Version$ + " (32 bit)"
				set $INSTALLER$ 		= $SrcDir$ + $JDK_INSTALLER_32$
				set $INSTALL_OPTIONS$ 	= $Inst_Opts_JDK$
				set $InstallDir$ 		= $InstallBase32$ + "\" + $PathPrefix$ + "JDK_" + $JAVA_VER$
				
				Sub_Install	
			else
				logWarning "JDK " + $Version$ + " is only available in 64 bit."
			endif				
		endif
		{{/ifdef_property_jdk}}
	
	endif
	
	if contains($sw_arch$,"64")
		;set $InstallDir$ 	= $InstallBase32$ + "\" + $PathPrefix$
	
		{{#ifdef_property_jre}}
		if ($bInstallJRE$ = "true")
			if (CompareDotSeparatedNumbers($Version$, "<", "9.0"))
				message "Installing JRE " + $Version$ + " (64 bit)"
				set $INSTALLER$ 		= $SrcDir$ + $JRE_INSTALLER_64$
				set $INSTALL_OPTIONS$	= $Inst_Opts_JRE$
				set $InstallDir$ 		= $InstallBase64$ + "\" + $PathPrefix$ + "JRE_" + $JAVA_VER$ 
				
				Sub_Install
			else
				; workaround for bodged JRE 9/10
				message "Processing workaround: Extracting MSI from executable"
				set $res$ = powershellGetExecPolicy($PWSH_EXECPOL$)
				if (lower($PWSH_EXECPOL$) = "unrestricted") OR (lower($PWSH_EXECPOL$) = "remotesigned")
					comment "Powershell execution policy is already set to: " + $PWSH_EXECPOL$
				else
					set $res$ = powershellSetExecPolicy("remotesigned")
					if not($res$ = "0") 
						LogError "Setting Powershell execution policy returns: " + $res$
					endif
				endif 
				
				; extract MSI from EXE
				ExecWith_PS__ExtractMSI powershell.exe  WINST /SysNative
				set $JRE_MSI$ = "%opsiTmpDir%\jre" +$JAVA_VER$ + "full.msi"
				if not (fileExists($JRE_MSI$))
					set $JRE_MSI$ = "%opsiTmpDir%\jre" +$JAVA_VER$ + "full64.msi"
				endif
				if (fileExists($JRE_MSI$))
					message "Installing JRE " + $Version$ + " MSI (64 bit)"
					set $INSTALLER$ 		= $JRE_MSI$ 
					set $INSTALL_OPTIONS$	= $Inst_Opts_MSI_JRE$
					set $InstallDir$ 		= $InstallBase64$ + "\" + $PathPrefix$ + "JRE_" + $JAVA_VER$ 
					Sub_Install
					Files_delete_MSI
				else
					logError "File not found: " + $JRE_MSI$
				endif
				
				; ...restore execution policy
				set $res$ = powershellSetExecPolicy($PWSH_EXECPOL$)
				if not($res$ = "0") 
						LogError "Setting Powershell execution policy returns: " + $res$
				endif	
				; ...end of JRE 9/10 workaround
			endif
		endif
		{{/ifdef_property_jre}}
		
		{{#ifdef_property_jdk}}
		if ($bInstallJDK$ = "true")
			message "Installing JDK " + $Version$ + " (64 bit)"
			set $INSTALLER$ 		= $SrcDir$ + $JDK_INSTALLER_64$
			set $INSTALL_OPTIONS$ 	= $Inst_Opts_JDK$
			set $InstallDir$ 		= $InstallBase64$ + "\" + $PathPrefix$ + "JDK_" + $JAVA_VER$
						
			Sub_Install		
		endif
		{{/ifdef_property_jdk}}
	
	endif	
	
	{{#ifdef_property_jdk}}
	if ($bInstallJDK$ = "true") AND ($pr_InstallJdkDoc$ = "true")
		ShowBitmap $Img_Addons$ $ProductName$
		message "Installing JDK Documentation " + $Version$
		if FileExists($SrcDir$ + $JDK_DOC$)
			if FileExists($InstallDir$)
				ShellInAnIcon_unzip_JDK_doc
				Set $ExitCode$ = getLastExitCode
				if not($ExitCode$ = "0")
					logError "Unpacking JDK docs has caused error " + $ExitCode$
				else
					if FileExists($InstallDir$ + "\docs\index.html")
						LinkFolder_JDK_Docs
					endif
				endif
			else
				logError "Target directory for JDK docs does not exist. (JDK installation failed?)"
			endif
		else
			logError "Can't find JDK docs archive: " + $JDK_DOC$
		endif
		ShowBitmap $Img_Install$ $ProductName$
	endif
	{{/ifdef_property_jdk}}
		
	;=== disable JAVA auto update
	Registry_disable_update	
	
	
	;===set environment variables if requested
	if ($pr_SetEnv_JavaHome$ = "yes")
		Comment "Set environment variables JAVA_HOME and PATH"
		; if install_architecture is set to both, use 64 bit as target
		; if JRE and JDK are installed, use JDK as target
		set $JAVA_HOME$ = $InstallDir$
		; ...just the last one in our install order (jre32, jdk32, jre64,jdk64)
		set $res$ = setEnvVar("JAVA_HOME", $JAVA_HOME$, "REG_SZ")
		set $PATH$ = getEnvVar("PATH")
		set $PATH$ = addPath($PATH$, "%JAVA_HOME%\bin")
		set $res$ = setEnvVar("PATH", $PATH$, "REG_EXPAND_SZ")
	endif
	

	;=== custom post install
	comment "include custom post install file"
	if not ($CustomPostInstall$ = "none")
		if FileExists("%ScriptPath%\custom\" + $CustomPostInstall$)
			ShowBitmap $Img_Install_Custom$ $ProductName$
			include_insert "%ScriptPath%\custom\" + $CustomPostInstall$
			ShowBitmap $Img_Install$ $ProductName$
		endif
	endif
	

	;=== measure installation time
	set $TimeDiff$ = getDiffTimeSec
	Message  "Setup time: " + $TimeDiff$ + " seconds"	
	
endif


;=====================================================================
[Sub_Install]
;=====================================================================
if not (FileExists($INSTALLER$))
	logError "Installer not found: [" + $INSTALLER$ + "]"
	isFatalError
endif
if (lower(takestring(-1, splitstring($INSTALLER$,'.'))) = "msi"	)	
	Winbatch_MSI_Install
else
	Winbatch_Install
endif
sub_check_exitcode_msi

;-----------------------------------------------------------
;*** get real name for main binary
;-----------------------------------------------------------
if not(FileExists($GETREALNAME$))
	logError "Can't find [" + $GETREALNAME$ + "]"
	set $program_real$ = ""
else
	set $OutStream$ = ShellCall($GETREALNAME$+' "' + $InstallDir$ + "\" + $MainBin$ + '"')
	if ( count ($OutStream$) = "0" )
		logError "Binary not found: ["+ $InstallDir$ + "\" + $MainBin$ + "]
	else
		set $program_real$  = takeString(0, $OutStream$)
		comment "GetRealName for [" + $InstallDir$ + "\" + $MainBin$ + "] returns [" + $program_real$ + "]"
		
		message "Configuring Windows Firewall for Java"			
		ShellInAnIcon_FW_JAVA
	endif
endif	


;=====================================================================
[Winbatch_Install]
;=====================================================================
"$INSTALLER$" INSTALLDIR="$InstallDir$" $INSTALL_OPTIONS$ 


;=====================================================================
[Winbatch_MSI_Install]
;=====================================================================
msiexec /qn /i "$INSTALLER$" INSTALLDIR="$InstallDir$" $INSTALL_OPTIONS$ 
 
 
;=====================================================================
[ShellInAnIcon_unzip_JDK_doc]
;===================================================================== 
$SEVENZIP$ x -o$InstallDir$  $SrcDir$$JDK_DOC$ 
exit $?
 
 
;=====================================================================
[LinkFolder_JDK_Docs]
;=====================================================================
set_basefolder common_programs
set_subfolder "Java Development Kit"
set_link
	name: JDK $Version$ Documentation
	target: $InstallDir$\docs\index.html
	working_dir: $InstallDir$\docs
	icon_file: $InstallDir$\bin\javaw.exe
	icon_index:
end_link
	
	
;=====================================================================
[ShellInAnIcon_FW_JAVA]
;=====================================================================
netsh advfirewall firewall add rule name="Java$JavaMajor$" dir=in action=block program="$program_real$" description="Blocking javaw.exe"

 
;=====================================================================
[Files_delInstallLog]
;=====================================================================
del -f "$InstallLog$"


;=====================================================================
[PatchTextFile_javasettingscfg]
;=====================================================================
SaveToFile "$JAVASETTINGSCFG$"


;=====================================================================
[Registry_disable_update]
;=====================================================================
OpenKey [HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\Java Update\Policy]
Set "EnableJavaUpdate"=REG_DWORD:0


;=====================================================================
[Files_delete_MSI]
;=====================================================================
del -f "$JRE_MSI$"


;=====================================================================
[ExecWith_PS__ExtractMSI]
;=====================================================================
#====================================================================
# Extrahieren des MSI-Paketes fuer JRE9/10 aus dem EXE-Installer 
# (Installation im System-Kontext)
# 
# req.: PowerShell 2.0
#
# Jens Boettge <boettge@mpi-halle.mpg.de>  2018-03-29 - 2018-04-04
#====================================================================
$jre_installer = "$SrcDir$\$JRE_INSTALLER_64$"
$jre_inst_args = "INSTALL_SILENT=1 REBOOT=0 /LV* %SystemDrive%\tmp\jre$JAVA_VER$_install_exe.log"
$tgt_dir = "%opsiTmpDir%"
# $tmp_dir = $env:LOCALAPPDATA + "Low\Oracle\Java\jre$JAVA_VER$_x64"
$tmp_dir = $env:SYSTEMROOT + "\system32\config\systemprofile\AppData\LocalLow\Oracle\Java\jre$JAVA_VER$_x64"
$DBG=$false

write-host "JRE temporary directory: $tmp_dir`r"
write-host "MSI target directory   : $tgt_dir`r"
write-host "EXE installer          : $jre_installer`r"

if (-not (Test-Path -PathType Container $tgt_dir ))
{
    New-Item -Path $tgt_dir -ItemType Directory | out-null
}

$files_done=@()
$app = Start-Process $jre_installer -ArgumentList $jre_inst_args -PassThru -ErrorAction SilentlyContinue
while (get-process -id $app.id -erroraction SilentlyContinue)
{
    sleep(0.2)
    if (-not ($DBG)) {write-host "." -NoNewline}
    #Get-ChildItem -Path $tmp_dir -File  -attributes !Temporary -filter 'jre*.msi' -ErrorAction SilentlyContinue | foreach  {
    Get-ChildItem -Path $tmp_dir -filter 'jre*.msi' -ErrorAction SilentlyContinue| foreach  {
        $s=$_.name
        if ($DBG) {write-host "* $s"} 
        if ( (-not($_.PSIsContainer))  -and (-not($files_done -contains $s)) ) 
        { 
            write-host "`rCopying $s to $tgt_dir"
            Copy-Item -force -Path $tmp_dir\$s -Destination $tgt_dir\
            $files_done+=$s
        }  
    }
}

if (($app) -and ($app.HasExited))
{
    write-host $app.ExitCode
    $msg = "`rDone with exit code: {0}" -f $app.ExitCode
    write-host $msg
    exit $app.ExitCode
} else { 
    write-host "`rInstaller is still running!"
    exit -1
}

